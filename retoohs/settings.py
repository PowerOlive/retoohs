"""
Django settings for retoohs project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from urllib.request import urljoin
from django.conf.global_settings import STATICFILES_FINDERS
import retoohs.settings_local_sample as sample_config

try:
    import retoohs.settings_local as config
except ImportError:
    config = {}


def _(attr, tp=None):
    value = os.environ.get(attr, getattr(config, attr, getattr(sample_config, attr, None)))
    if isinstance(value, str):
        if value.lower() == 'true':
            return True
        if value.lower() == 'false':
            return False
    if tp:
        return tp(value)
    return value


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = _('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = _('DEBUG', bool)

ALLOWED_HOSTS = ['*']

# Email

EMAIL_HOST = _('EMAIL_HOST')
EMAIL_HOST_PASSWORD = _('EMAIL_HOST_PASSWORD')
EMAIL_HOST_USER = _('EMAIL_HOST_USER')
EMAIL_PORT = _('EMAIL_PORT', int)
EMAIL_SUBJECT_PREFIX = _('EMAIL_SUBJECT_PREFIX')
EMAIL_USE_TLS = _('EMAIL_USE_TLS', bool)
EMAIL_USE_SSL = _('EMAIL_USE_SSL', bool)
EMAIL_SENDER = _('EMAIL_SENDER')

# Site URL

SITE_URL = _('SITE_URL').strip()
EMAIL_VERIFICATION_URL = SITE_URL + '/email-verify/{}'
EMAIL_VERIFICATION_EXPIRE_HOURS = 12

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'main',
    'ss',
    'el_pagination',
    'easy_thumbnails',
    'constance',
    'constance.backends.database',
    'djangobower',
    'lbforum',
    'lbattachment',
    'lbutils',
    'avatar',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'retoohs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'retoohs.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

if _('DB_TYPE') == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        },
    }
elif _('DB_TYPE') == 'mysql':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'HOST': _('DB_HOST'),
            'NAME': _('DB_NAME'),
            'USER': _('DB_USER'),
            'PASSWORD': _('DB_PASS'),
        }
    }
elif _('DB_TYPE') == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': _('DB_NAME'),
            'USER': _('DB_USER'),
            'PASSWORD': _('DB_PASS'),
            'HOST': _('DB_HOST'),
            'PORT': _('DB_PORT', int),
        }
    }
else:
    raise ValueError('Databases must be sqlite or mysql')

AUTH_USER_MODEL = 'main.User'
AUTHENTICATION_BACKENDS = ['main.backends.MyUserBackend']

MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = _('STATIC_ROOT')
STATICFILES_DIRS = [
    'static',
    os.path.join(BASE_DIR, 'static'),
]
LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/'

# Crispy form
CRISPY_TEMPLATE_PACK = 'bootstrap3'

# SS Settings
GB = 1024 * 1024 * 1024
DEFAULT_TRAFFIC = 10 * GB
START_PORT = 10000
ADMIN_URL = _('ADMIN_URL')

# LBForum
LBFORUM_TITLE = _('LBFORUM_TITLE') or 'retoohs'
HOST_URL = _('HOST_URL') or ''
MEDIA_URL_ = '/media/'
MEDIA_URL = HOST_URL + MEDIA_URL_
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

SIGNUP_URL = '/register'
LOGOUT_URL = '/logout'
CHANGE_PASSWORD_URL = '/accounts/password/change/'

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CONSTANCE_CONFIG = {
    'forbidden_words': ('', 'Forbidden words', str),
}

STATICFILES_FINDERS += ('djangobower.finders.BowerFinder',)

BOWER_COMPONENTS_ROOT = BASE_DIR

BOWER_INSTALLED_APPS = (
    'jquery#1.12',
    'markitup#1.1.14',
    'mediaelement#2.22.0',
    'blueimp-file-upload#9.12.5',
)

BBCODE_AUTO_URLS = True

# add allow tags
HTML_SAFE_TAGS = ['embed']
HTML_SAFE_ATTRS = ['allowscriptaccess', 'allowfullscreen', 'wmode']

# add forbid tags
HTML_UNSAFE_TAGS = []
HTML_UNSAFE_ATTRS = []

# avatar
AVATAR_ADD_TEMPLATE = 'main/avatar_add.html'
AVATAR_CHANGE_TEMPLATE = 'main/avatar_change.html'
AVATAR_DELETE_TEMPLATE = 'main/avatar_confirm_delete.html'
